import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import { AppState } from 'store'
import { Status } from 'types'

export type Album = {
  data: {
    id: number
    title: string
    link: string
    cover: string
    cover_small: string
    cover_medium: string
    cover_big: string
    cover_xl: string
    md5_image: string
    genre_id: number
    nb_tracks: number
    record_type: string
    tracklist: string
    explicit_lyrics: boolean
    album: {
      id: number
      name: string
      link: string
      picture: string
      picture_small: string
      picture_medium: string
      picture_big: string
      picture_xl: string
      tracklist: string
      type: 'album'
    }
    type: 'album'
  }[]
  total: number
  next: string
}

export type AlbumState = {
  status: Status
  data: Album
  error: string | null | undefined
}

const initialState: AlbumState = {
  data: {} as Album,
  status: Status.IDLE,
  error: null,
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(fetchAlbums(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchAlbums = createAsyncThunk(
  'album/fetchAlbums',
  async (albumQuery: string, { rejectWithValue }) => {
    try {
      // const response = await fetch(`https://api.deezer.com/search/album/?q=eminem&output=json`)
      const response = await fetch(`/search/album/?q=${albumQuery}&output=json`)
      const data = await response.json()

      if (!data || data?.errorMessage) {
        throw new Error('Data not found')
      }

      // The value we return becomes the `fulfilled` action payload
      return data
    } catch (error) {
      return rejectWithValue((error as Error).message)
    }
  }
)

export const albumSlice = createSlice({
  name: 'album',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAlbums.pending, (state) => {
        state.status = Status.PENDING
        state.error = null
      })
      .addCase(fetchAlbums.fulfilled, (state, action) => {
        state.status = Status.FULFILLED
        state.data = action.payload
        state.error = null
      })
      .addCase(fetchAlbums.rejected, (state, action) => {
        state.status = Status.REJECTED
        state.data = {} as Album
        state.error = action.payload as string
      })
  },
})

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: AppState) => state.album.value)`
export const selectAlbum = (state: AppState) => state.albums

export default albumSlice.reducer
